         TITLE 'WVOLCOL0 - ANALYZE LOAD PDSES'
***********************************************************************
*                                                                     *
*                                                                     *
*    WRITTEN BY JOHN R. GROUT (EARLIER VERSION BY CHRIS MARTEN)       *
*      FIXED BY SAM GOLOB TO ADD ERROR REPORTING IN SYSPRINT.         *
*                                                                     *
*    MODULE:   WVOLCOL0                                               *
*                                                                     *
*    FUNCTION: WVOLCOL0 READS IN DATA SET RECORDS DESCRIBING LOAD     *
*              PDSES ON A GIVEN VOLUME AND WRITES OUT MEMBER RECORDS  *
*              AND IDR RECORDS FOR EACH MEMBER CONTAINED IN THE PDSES.*
*                                                                     *
*    INPUT:    INDSR0 - DATA SET RECORDS FOR LOAD PROCESSING          *
*                                                                     *
*    OUTPUT:   RETURN CODE IN REG 15                                  *
*                 0 - PROCESSING COMPLETE NORMALLY                    *
*                16 - COULD NOT OPEN A DCB FOR PROCESSING             *
*                                                                     *
*              OUTMBR0  - MEMBER RECORDS FOR SELECTED LOAD PDSES      *
*              SYSPRINT - REPORT OF DATASETS SKIPPED BECAUSE OF       *
*                         ERRORS OR DISCREPANCIES WITH STAGE 1.       *
*                                                                     *
*    REGISTERS:                                                       *
*                 R12 - BASE REGISTER                                 *
*                                                                     *
*    EXTERNAL REFERENCES:                                             *
*                                                                     *
*      ICSORTI - STANDARD TABLE SORT (INTERNAL VERSION USED TO AVOID  *
*                 GETMAIN FOR EACH DATA SET)                          *
*                                                                     *
*    MACROS USED:                                                     *
*                                                                     *
*    OPEN, CLOSE, PUT, GET, READ, POINT, DYNALLOC                     *
*                                                                     *
* PROGRAM LOGIC:                                                      *
*                                                                     *
* THE CONTROL RECORD IS READ TO DETERMINE THE VOLUME TO BE PROCESSED. *
* EACH PDS DESCRIBED BY A DATA SET RECORD IS DYNAMICALLY ALLOCATED,   *
* ITS DIRECTORY IS READ, MEMBER RECORDS ARE WRITTEN TO 31-BIT         *
* ADDRESSABLE STORAGE AND SORTED BY TTR.  THEN, EACH MEMBER RECORD IS *
* REREAD, THE CORRESPONDING MEMBER IS ACCESSED (VIA POINT), THE MEMBER*
* RECORD IS WRITTEN TO AN OUTPUT FILE, AND, FOR ANY IDR RECORDS THAT  *
* ARE FOUND IN THE MEMBER, IDR RECORDS CONTAINING THEM ARE WRITTEN TO *
* AN OUTPUT FILE (EXCEPTION: DUMMY IDR ZAP RECORDS ARE IGNORED).      *
*                                                                     *
* INPUT:                                                              *
*                                                                     *
* THE CONTROL AND DATA SET RECORDS READ BY WVOLCOL0 ARE READ FROM     *
* FILE INDSR0: THE RECORD FORMATS ARE GIVEN BELOW.                    *
*                                                                     *
* OUTPUT:                                                             *
*                                                                     *
* THE PROGRAM CREATES AN OUTPUT FILE CONTAINING MEMBER RECORDS (SEE   *
* BELOW FOR FORMAT).                                                  *
*                                                                     *
* THE SYSPRINT OUTPUT FILE REPORTS DATASETS SKIPPED FOR THE           *
* FOLLOWING REASONS:                                                  *
*                                                                     *
*   1.  A DATASET ON THE VOLUME WAS DELETED OR RENAMED AFTER          *
*       THE STAGE 1 VTOC ENTRY GATHERING WAS DONE.                    *
*   2.  DYNALLOC FAILED FOR THE DATASET, BECAUSE SOMEBODY WAS         *
*       HOLDING AN EXCLUSIVE ENQUEUE ON IT.                           *
*                                                                     *
*   YOU DO NOT WANT TO SKIP A DATASET THAT IS A TARGET LIBRARY        *
*   OR AN EXECUTION LIBRARY FOR THE SUBSEQUENT SAS PROCESSING.        *
*   THEREFORE IT IS BEST TO RUN THE STAGE 2 (MEMBER LEVEL) DATA       *
*   GATHERING AT A TIME WHEN SIGNIFICANT DATASETS ARE NOT BEING       *
*   ENQUEUED UPON (EXCLUSIVELY).                                      *
*                                                                     *
* THE FILE CONTAINING MEMBER RECORDS IS OUTMBR0.                      *
***********************************************************************
          EJECT
***********************************************************************
*                                                                     *
* CONTROL RECORD                                                      *
* ******* ******                                                      *
*                                                                     *
* A RECORD IS DESCRIBED BY DSECT CTLREC                               *
*                                                                     *
*   BYTES 0-1        RECORD DESCRIPTOR WORD (SET TO 16 BYTES)         *
*                                                                     *
*   BYTES 2-3        RESERVED (MUST BE ZERO)                          *
*                                                                     *
*   BYTES 4-5        DATA SET NUMBER (SET TO ZERO)                    *
*                                                                     *
*   BYTES 6-7        MEMBER NUMBER (SET TO ZERO)                      *
*                                                                     *
*   BYTE  8          RECORD TYPE:                                     *
*                                                                     *
*                      X'00' - CONTROL RECORD                         *
*                                                                     *
*   BYTE  9          SECTION TYPE                                     *
*                                                                     *
*                      X'00' - BASE                                   *
*                                                                     *
*   BYTES 10-15      VOLUME SERIAL                                    *
*                                                                     *
*   BYTES 16-149     RESERVED (SET TO ZERO)                           *
*                                                                     *
* DATA SET RECORD                                                     *
* **** *** ******                                                     *
*                                                                     *
* A RECORD IS DESCRIBED BY DSECTS CDSREC AND CDSRECVR                 *
*                                                                     *
*   CDSREC (BASE SECTION)                                             *
*                                                                     *
*   BYTES 0-1        RECORD DESCRIPTOR WORD (SET TO 160 BYTES)        *
*                                                                     *
*   BYTES 2-3        RESERVED (MUST BE ZERO)                          *
*                                                                     *
*   BYTES 4-5        DATA SET NUMBER (IN ALPHABETIC SEQUENCE)         *
*                                                                     *
*   BYTES 6-7        MEMBER NUMBER (SET TO ZERO)                      *
*                                                                     *
*   BYTE  8          RECORD TYPE:                                     *
*                                                                     *
*                      X'01' - DATA SET RECORD                        *
*                                                                     *
*   BYTE  9          BASE FOR CDSRECVR                                *
*                                                                     *
*   CDSRECVR (VARIABLE SECTION)                                       *
*                                                                     *
*   BYTE  0          SECTION TYPE:                                    *
*                                                                     *
*                      X'00' - SELECTABLE LOAD PDS                    *
*                      X'01' - SELECTABLE SOURCE PDS                  *
*                      X'02' - OTHER NON-VSAM DATA SET                *
*                                                                     *
*   BYTES 1-140      FORMAT-1 DSCB (140 BYTES)                        *
*                                                                     *
* MEMBER RECORD                                                       *
* ****** ******                                                       *
*                                                                     *
* A RECORD IS DESCRIBED BY DSECTS CMBREC AND CMBRECVR                 *
*                                                                     *
*   CMBREC (BASE SECTION)                                             *
*                                                                     *
*   BYTES 0-1        RECORD DESCRIPTOR WORD (VARIABLE)                *
*                                                                     *
*   BYTES 2-3        RESERVED (MUST BE ZERO)                          *
*                                                                     *
*   BYTES 4-5        DATA SET NUMBER (IN ALPHABETIC SEQUENCE)         *
*                                                                     *
*   BYTES 6-7        MEMBER NUMBER (IN ALPHABETIC SEQUENCE)           *
*                                                                     *
*   BYTE  8          RECORD TYPE:                                     *
*                                                                     *
*                      X'02' - MEMBER RECORD                          *
*                                                                     *
*   BYTE  9          BASE FOR CMBRECVR                                *
*                                                                     *
*   CMBRECVR (VARIABLE SECTION)                                       *
*                                                                     *
*   BYTE  0          SECTION TYPE:                                    *
*                                                                     *
*                      X'00' - BASE SECTION (CONTAINS DE)             *
*                      X'01' - HASH SECTION (CONTAINS HASH FIELD)     *
*                                                                     *
*   BYTES 1-74       DE (VARIABLE LENGTH)                             *
*                                                                     *
*    (OR)                                                             *
*                                                                     *
*   BYTES 1-4        STATEMENT COUNT (4 BYTES)                        *
*                                                                     *
*   BYTES 5-12       HASH (8 BYTES)                                   *
*                                                                     *
* IDR RECORD                                                          *
* *** ******                                                          *
*                                                                     *
* A RECORD IS DESCRIBED BY DSECT CIDREC                               *
*                                                                     *
*   BYTES 0-1        RECORD DESCRIPTOR WORD (VARIABLE)                *
*                                                                     *
*   BYTES 2-3        RESERVED (MUST BE ZERO)                          *
*                                                                     *
*   BYTES 4-5        DATA SET NUMBER (IN ALPHABETIC SEQUENCE)         *
*                                                                     *
*   BYTES 6-7        MEMBER NUMBER (IN ALPHABETIC SEQUENCE)           *
*                                                                     *
*   BYTE  8          RECORD TYPE:                                     *
*                                                                     *
*                      X'03' - IDR RECORD                             *
*                                                                     *
*   BYTE  9          LENGTH OF THIS SECTION (IN BYTES)                *
*                                                                     *
*   BYTE  10         IDR RECORD TYPE                                  *
*                                                                     *
*   BYTES 11-263     REST OF IDR RECORD                               *
*                                                                     *
* MESSAGES                                                            *
* ********                                                            *
*                                                                     *
***********************************************************************
         TITLE 'WVOLCOL0 - MAPPING DSECTS'
*
* COMPARISON DATASET FORMATS
*
* CONTROL RECORD
CTLREC   DSECT
CTLLEN   DS    H                     LENGTH OF RECORD
CTLRESV  DS    CL8                   RESERVED (MUST BE ZERO)
         ORG   CTLRESV+2
CTLDSNM  DS    H                     DATA SET NUMBER
CTLMBNM  DS    H                     MEMBER NUMBER
CTLTYPE  DS    XL1                   RECORD TYPE
TYPECTL  EQU   X'00'                 CONTROL RECORD
CTLSTYP  DS    XL1                   SECTION TYPE
CTLVOLSR DS    CL6                   VOLUME SERIAL
CTLRESV1 DS    CL134                 RESERVED (MUST BE ZERO)
* DATA SET RECORD
CDSREC   DSECT
CDSLEN   DS    H                     LENGTH OF RECORD
CDSRESV  DS    H                     RESERVED (MUST BE ZERO)
CDSDSNM  DS    H                     DATA SET NUMBER
CDSMBNM  DS    H                     MEMBER NUMBER
CDSTYPE  DS    XL1                   RECORD TYPE
TYPEDSR  EQU   X'01'                 DATA SET RECORD
CDSVAR   DS    0C                    BEGINNING OF VARIABLE LENGTH SECT
CDSRECVR DSECT
CDSSTYPE DS    XL1                   SECTION TYPE
STYPLOAD EQU   X'00'                 LOAD PDS (SELECTABLE)
STYPSRCE EQU   X'01'                 SOURCE PDS (SELECTABLE)
STYPNSLC EQU   X'02'                 NON-SELECTABLE
CDSFMT1D DS    CL140                 FORMAT-1 DSCB
         ORG   CDSFMT1D
CDSDSN   DS    CL44                  DATA SET NAME
         SPACE ,
* MEMBER RECORD
CMBREC   DSECT
CMBLEN   DS    H                     LENGTH OF RECORD
CMBRESV  DS    H                     RESERVED (MUST BE ZERO)
CMBDSNM  DS    H                     DATA SET NUMBER
CMBMBNM  DS    H                     MEMBER NUMBER
CMBTYPE  DS    XL1                   RECORD TYPE
TYPEMBR  EQU   X'02'                 MEMBER RECORD
CMBVAR   DS    0C                    BEGINNING OF VARIABLE LENGTH SECT
CMBRECVR DSECT
CMBSTYPE DS    XL1                   SECTION TYPE
STYPBASE EQU   X'00'                 BASE SECTION (DE)
STYPHASH EQU   X'01'                 HASH SECTION
CMBDE    DS    CL74                  DE (VARIABLE LENGTH)
         ORG   CMBDE
CMBNAME  DS    CL8                   MEMBER NAME
CMBTTR   DS    CL3                   TTR (NOT ALIGNED FOR POINT)
CMBCNT   DS    CL1                   COUNT FOR REST OF RECORD (* 2)
         ORG   CMBDE
CMBMRCNT DS    XL4                   MEMBER COUNT (NOT ALIGNED!)
CMBHASH  DS    CL8                   HASH CODE
         SPACE ,
* IDR RECORD
CIDREC   DSECT
CIDLEN   DS    H                     LENGTH OF RECORD
CIDRESV  DS    H                     RESERVED (MUST BE ZERO)
CIDDSNM  DS    H                     DATA SET NUMBER
CIDMBNM  DS    H                     MEMBER NUMBER
CIDTYPE  DS    XL1                   RECORD TYPE
TYPEIDR  EQU   X'03'                 IDR RECORD
CIDRREC  DS    CL255                 IDR RECORD (UP TO 255 BYTES)
         ORG   CIDRREC
CIDSECLN DS    XL1                   SECTION LENGTH
         SPACE ,
DIRBLKDS DSECT
DIRBLOCK DS    32D
LODDECB  DSECT
LODDECBH DS    CL4
LODDECBP DS    A
LODDDECB READ  DLODDECB,SF,LOADDCB,,32760,MF=L
         DS    0F
LODDECBL EQU   *-LODDECB
         EJECT
*        PRINT  OFF
WVOLDSCB DSECT
         IECSDSL1 (1)
WVOLCOL0 CSECT
         EXTRN  ICSORTI
         DCBD   DSORG=(PS,PO)
         EJECT
         IEFZB4D0
RBLEN    EQU    (S99RBEND-S99RB)
         IEFZB4D2
*        PRINT  ON
         SPACE  ,
R0       EQU    0
R1       EQU    1
R2       EQU    2
R3       EQU    3
R4       EQU    4
R5       EQU    5
R6       EQU    6
R7       EQU    7
R8       EQU    8
R9       EQU    9
R10      EQU    10
R11      EQU    11
R12      EQU    12
R13      EQU    13
R14      EQU    14
R15      EQU    15
SRTBUFSZ EQU   4194340              GET 4M TOTAL STORAGE
TAGBUFSZ EQU   163840               ALLOW FOR 20,480 MEMBERS
         TITLE  'WVOLCOL0 -- INITIALIZATION'
***********************************
*                                 *
*        INITIALIZATION           *
*                                 *
***********************************
WVOLCOL0 CSECT
         SAVE  (14,12)
         SPACE ,
         LR    R12,R15
         LA    R11,4095(,R12)
         LA    R11,1(,R11)
         USING WVOLCOL0,R12,R11
         SPACE ,
         ST    R13,SAVEAREA+4
         LA    R1,SAVEAREA
         ST    R1,8(,R13)
         LR    R13,R1
         SPACE 2
         OPEN  (SYSPRINT,OUTPUT)
         L     R1,=A(DCBLST)
         OPEN  MF=(E,(1))
         USING IHADCB,R3
         LA    R3,OMBR0DCB
         TM    DCBOFLGS,X'10'
         BZ    BADDCB
         LA    R3,IDSR0DCB
         TM    DCBOFLGS,X'10'
         BZ    BADDCB
         DROP  R3
         TITLE  'WVOLCOL0 -- DATA SET RECORD PROCESSING'
******************************************************
*                                                    *
* READ THE CONTROL RECORD                            *
*                                                    *
******************************************************
         GET   IDSR0DCB
         USING CTLREC,R1
         MVC   VOLUME,CTLVOLSR      SAVE THE VOLSER FOR DYNALLOC
         DROP  R1
         MVC   BLANKSMS,BLANKSMS-1  CLEAR BLANK SPACES
         MVC   HEADERMS,BLANKSMS    CLEAR HEADER LINE
         MVI   HEADERMS,C'1'        SKIP TO NEW PAGE
         MVC   HEADERMS+2(8),=C'WVOLCOL0'  PROGRAM NAME
         MVC   HEADERMS+16(6),VOLUME       VOLSER
         MVC   HEADERMS+38(44),HEADR1DS    MOVE TITLE
         PUT   SYSPRINT,HEADERMS
         PUT   SYSPRINT,BLANKSMS
******************************************************
*                                                    *
* READ A DATA SET RECORD                             *
*                                                    *
******************************************************
GETLOOP  DS    0H
         GET   IDSR0DCB             GET A DATA SET RECORD
         LR    R9,R1                POINT TO DATA SET RECORD
         USING CDSREC,R9
         MVC   DSNUM(2),CDSDSNM     SAVE DATA SET NUMBER
         LA    R9,CDSVAR            POINT TO 2ND SECTION
         USING CDSRECVR,R9
         LA    R9,CDSFMT1D          LOAD ADDRESS OF FORMAT-1 DSCB
         USING WVOLDSCB,R9
         SPACE ,
         LA    R1,DYNALRB           STORE DYNALLOC RB
         ST    R1,DYNALPTR            POINTER INTO PTR FIELD
         USING S99RB,R1
         OI    DYNALPTR,S99RBPND    REQUIRED BIT ON ...
         MVI   S99RBLN,RBLEN        SET RB LTH FIELD
         MVI   S99VERB,S99VRBAL     VERB CODE = ALLOCATION
         SPACE ,
         LA    R6,S99RB+RBLEN       ADDRESS
         USING S99TUPL,R6             TUP LIST
         ST    R6,S99TXTPP              AND SAVE IN RB
         SPACE ,
         L     R3,=A(TUPTR)         LOAD POINTER TO TUS
         USING TUPTR,R3
         LA    R2,DSNTU             ADDRESS DSNAME TUP
         ST    R2,S99TUPTR            AND STORE IN LIST ...
         SPACE ,
         LA    R2,DISPTU            ADDRESS DISP TUP
         ST    R2,S99TUPTR+4          AND STORE IN LIST ...
         SPACE ,
         LA    R2,VOLTU             ADDRESS VOLUME TUP
         ST    R2,S99TUPTR+8          AND STORE IN LIST ...
         SPACE ,
         LA    R2,UNITTU            ADDRESS UNIT TUP
         ST    R2,S99TUPTR+12         AND STORE IN LIST ...
         SPACE ,
         LA    R2,CLOSTU            ADDRESS FREE = CLOSE TUP
         ST    R2,S99TUPTR+16         AND STORE IN LIST ...
         SPACE ,
         LA    R2,RETNDDN           ADDRESS DDNAME RETURN TUP
         ST    R2,S99TUPTR+20         AND, OF COURSE ....
         SPACE ,
         OI    S99TUPTR+20,S99TUPLN     FLAG LAST TUP ENTRY
         SPACE ,
         MVC   PODSN(44),DS1DSNAM
         DROP  R9
         SPACE 2
         ST    R2,SAVEREG2          SAVE REG 2
         OBTAIN ISSTILL
         C     R15,=F'8'            RC FOR DATASET NOT THERE?
         BE    NODSNM               HANDLE "MISSING DSN" CONDITION
         L     R2,SAVEREG2          RESTORE REG 2
         LTR   R15,R15              IS THE DATASET STILL THERE?
         BZ    DODYN                YES, DO DYNALLOC FOR IT
*                                   HANDLE OTHER OBTAIN RET CODES
         MVC   MISCERVL(6),VOLUME
         MVC   MISCERDS(44),PODSN
         PUT   SYSPRINT,MISCERMS
         LA    R15,0
         B     GETLOOP
         SPACE 2
DODYN    DS    0H
         LA    R1,DYNALPTR            SETUP FOR CALL
         DYNALLOC                   CALL SVC 99 ........
         SPACE 2
         LTR   R15,R15
         BNZ   BADALLOC
         DROP  R1,R3,R6
         SPACE ,
**********************************
*                                *
*  OPEN PDS - PROCESS DIRECTORY  *
*                                *
**********************************
         USING DIRBLKDS,R8
         SPACE ,
         LA    R3,DIRDCB
         USING IHADCB,R3
         MVC   DCBDDNAM(8),PODDN    SET DYNALLOC DDNAME
         SPACE ,
         OPEN  (DIRDCB)
         SPACE ,
         TM    DCBOFLGS,X'10'
         BZ    BADDCB
         L     R1,DECBFQ            LOAD POINTER TO DECB FREE QUEUE?
         LTR   R1,R1                HAS QUEUE BEEN INITIALIZED?
         BNZ   PROCLOAD             YES, SKIP INIT
         LA    R3,LOADDCB           POINT TO MEMBER DCB
         XC    DCBBLKSI,DCBBLKSI    INSURE GETPOOL FIRST TIME
         L     R1,=A(DECBQARE)      LOAD ADDRESS OF DECB QUEUE AREA
         ST    R1,DECBFQ            STORE DECB FREE QUEUE POINTER
         XC    DECBUQF,DECBUQF      INITIALIZE DECB USE Q FIRST PTR
         XC    DECBUQL,DECBUQL      INITIALIZE DECB USE Q LAST PTR
         USING LODDECB,R1
LDDECBLP MVC   0(LODDECBL,R1),MLODDECB INITIALIZE LOOP
         LA    R0,LODDECBL(,R1)     LOAD ADDRESS OF NEXT DECB
         C     R0,=A(DECBQARN)      ARE WE DONE WITH INIT?
         BE    GETSRTTB             YES, GO GET SORT BUFFERS
         ST    R0,LODDECBP          STORE NEXT POINTER
         LR    R1,R0                LOAD NEW REGISTER CONTENTS
         B     LDDECBLP             GO BACK THROUGH LOOP
         DROP  R1
GETSRTTB DS    0H
         CNOP  2,4
         L     R14,*+6
         BSM   0,14                 ENTER 31 BIT MODE
         DC    A(X'80000000'+*+4)
         GETMAIN RU,LV=SRTBUFSZ,BNDRY=PAGE,LOC=(ANY,ANY)
         LA    R1,0(,R1)            PURIFY ADDRESS
         ST    R1,SRTTAGBG          STORE START OF SORT TAG AREA
         ST    R1,SRTTAGPT          STORE SORT TAG POINTER
         A     R1,=F'4096'          POINT TO NEXT PAGE
         ST    R1,SORTTAGB
         A     R1,=A(TAGBUFSZ-4096)
         ST    R1,SRTRECBG          STORE START OF SORT REC AREA
         ST    R1,SRTRECPT          STORE SORT RECORD POINTER
         A     R1,=F'4096'
         ST    R1,SORTRECB
         CNOP  2,4
         L     R14,*+6
         BSM   0,14                 ENTER 24 BIT MODE
         DC    A(*+4)
         TITLE  'WVOLCOL0 -- LOAD DATASET PROCESSING'
******************
*                *
* LOAD DATASET *
*                *
******************
PROCLOAD DS    0H
         MVC   SORTITCT,=H'-1'      CLEAR TOTAL MBR COUNTER
         LA    R3,LOADDCB
         MVC   DCBDDNAM(8),PODDN    SET DYNALLOC DDNAME
         LH    R2,DSNBLKL           LOAD BLOCK LENGTH
         STH   R2,DCBBLKSI          SET BLOCK SIZE
         TM    FLAGS,GPOOLFLG       IS THIS FIRST TIME?
         BO    PRODLOD1             NO, SKIP GETPOOL
         GETPOOL (3),7,(2)          GET A BUFFER POOL (NCP * LEN)
         OI    FLAGS,GPOOLFLG       INDICATE POOL GOTTEN
         SPACE ,
PRODLOD1 DS    0H
         OPEN  (LOADDCB)              AND OPEN MEMBER DCB
         SPACE ,
         TM    DCBOFLGS,X'10'
         BZ    BADDCB
         DROP  R3
         SPACE ,
STTRSORT DS    0H
         XC    DIRAREA,DIRAREA      INIT DIR BLOCK POINTERS
RDDIRLOP LM    R7,R8,DIRAREA        LOAD POINTERS
         LTR   R7,R7                TEST POINTER
         BNZ   SPDSRDR2             POSITIVE, CONTAINS VALID PTR
SPDSRDR1 DS    0H
         CNOP  2,4
         L     R14,*+6
         BSM   0,14                 ENTER 24 BIT MODE
         DC    A(*+4)
         GET   DIRDCB               READ A DIRECTORY BLOCK
         LA    R8,0(,R1)            SET POINTER TO DIRECTORY BLOCK
         ST    R8,DIRBLK            STORE DIRECTORY BLOCK POINTER
         LA    R7,DIRBLOCK+2        POINT TO FIRST MEMBER
         CNOP  2,4
         L     R14,*+6
         BSM   0,14                 ENTER 31 BIT MODE
         DC    A(X'80000000'+*+4)
SPDSRDR2 CLC   0(8,R7),FOXES        IS THIS THE LAST MEMBER IN DIR?
         BE    SORTREC              YES, GO SORT RECORDS
         LH    R1,SORTITCT
         AH    R1,=H'1'             COUNT IT
         STH   R1,SORTITCT          STORE NEW COUNT
         L     R9,SRTRECPT          POINT TO BEGINNING OF NEW RECORD
         USING CMBREC,R9            SET UP BASE FOR MEMBER RECORD
         XC    CMBRESV,CMBRESV      CLEAR OUT RESERVED FIELD
         MVC   CMBDSNM,DSNUM        MOVE IN SAVED DATA SET NUMBER
         STH   R1,CMBMBNM           MOVE IN SAVED MEMBER NUMBER
         MVI   CMBTYPE,TYPEMBR      SET RECORD TYPE TO MEMBER
         LA    R1,CMBVAR            LOAD START OF VAR SECTION
         USING CMBRECVR,R1
         MVI   CMBSTYPE,STYPBASE    SET FIRST SUBTYPE
         IC    R10,11(,R7)
         N     R10,=F'31'           KEEP BITS 3 - 7
         SLL   R10,1                X2 FOR HALFWORD LTH
         LA    R10,12(,R10)         ADD LTH OF NAME + TTRC
         LR    R2,R10               DO MOVE OF DE TO RECORD
         BCTR  R2,0                 DECREMENT LENGTH FOR MOVE INTO REC
         EX    R2,MVCDE             MOVE DE (MVC USES R1 EXPLICITLY)
         L     R2,SRTTAGPT          LOAD POINTER TO SORT TAG RECORD
         MVC   0(3,R2),CMBTTR       STORE TTR FOR SORT
         MVI   3(R2),X'00'          STORE '00' TO USE FOR POINT
         DROP  R1
         ST    R9,4(,R2)            STORE POINTER TO RECORD FOR SORT
         LA    R2,8(,R2)            POINT TO NEXT SORT RECORD
         ST    R2,SRTTAGPT          SAVE POINTER
         AR    R7,R10               STEP TO NEXT DE
         LA    R10,10(,R10)         ADD LENGTH OF REST OF MBR RECORD
         STH   R10,CMBLEN           STORE LENGTH
         AR    R9,R10               POINT TO NEW RECORD
         ST    R9,SRTRECPT          STORE POINTER
         SPACE ,
         LR    R10,R8
         LH    R15,0(,R10)
         AR    R10,R15
         CR    R7,R10               BLOCK EXHAUSTED?
         BNL   SPDSRDR3
         ST    R7,DIRPTR            STORE NEW POINTER FOR NEXT TIME
         B     RDDIRLOP             GO CONTINUE
         SPACE
MVCDE    MVC   CMBDE-CMBRECVR(0,R1),0(R7)
         SPACE 2
SPDSRDR3 XC    DIRPTR,DIRPTR        ZERO OUT DIRECTORY PTR
         B     RDDIRLOP             GO CONTINUE
         DROP  R8,R9
DIREODAD DS    0H
         CNOP  2,4
         L     R14,*+6
         BSM   0,14                 ENTER 31 BIT MODE
         DC    A(X'80000000'+*+4)
SORTREC  DS    0H
         CLC   SRTTAGBG,SRTTAGPT    ARE THERE NO MEMBERS IN DS?
         BE    INITSRT1             YES, GO CLOSE DOWN DS
         LH    R1,SORTITCT          INCREMENT SORT ITEM COUNT
         AH    R1,=H'1'             FOR ICSORTI
         STH   R1,SORTITCT          STORE NEW COUNT
         MVC   ICSORTTB,SRTTAGBG    MOVE IN TAG TABLE ADDRESS
         LA    R1,ICSORTPR          LOAD ADDRESS OF ICSORTI PARMS
         L     R15,=A(X'80000000'+ICSORTI) SET ICSORTI ADDRESS IN R15
         BASSM R14,R15              CALL ICSORTI
         L     R8,SRTTAGBG          LOAD BEGINNING OF MEMBERS
MEMLOOP  C     R8,SRTTAGPT          ARE THERE NO MORE MEMBERS?
         BE    CHEKTSTR             YES, GO DO PAGE RELEASE
         L     R9,4(,R8)            LOAD POINTER TO MEMBER RECORD
         USING CMBREC,R9            SET UP ADDRESSABILITY TO RECS
         MVC   TTRAREA(3),0(R8)     MOVE TO BELOW THE LINE STORAGE
         L     R2,=A(IDRWAREA)      POINT TO IDR WORK AREA
         USING CIDREC,R2
         MVC   CIDRESV(6),CMBRESV   INITIALIZE IDR RECORD AREA
         MVI   CIDTYPE,TYPEIDR      INITIALIZE RECORD TYPE
         CNOP  2,4
         L     R14,*+6
         BSM   0,14                 ENTER 24 BIT MODE
         DC    A(*+4)
         POINT LOADDCB,TTRAREA      POINT TO TTRZ
         XC    BUFFPTR,BUFFPTR      CLEAR OUT BUFFER POINTER
         OI    FLAGS,READFLAG
         NI    FLAGS,X'FF'-JUSTCHEK
         SPACE ,
READMEM  DS    0H
         TM    FLAGS,READFLAG       IS READ FLAG ON?
         BZ    CHEKMEM              NO, GO TO CHECK BUFFER
         L     R6,DECBFQ            LOAD POINTER TO DECB FREE QUEUE
         LTR   R6,R6                ARE THERE ANY FREE DECB'S?
         BZ    STOPREAD             NO, GO WAIT FOR NEXT BLOCK
         GETBUF LOADDCB,(3)         GET A BUFFER FOR READ
         USING LODDECB,R6
         READ  LODDDECB,SF,,(3),MF=E DO READ
         L     R1,LODDECBP          LOAD POINTER TO NEXT DECB
         ST    R1,DECBFQ            STORE AS HEAD OF FREE QUEUE
         XC    LODDECBP,LODDECBP    NO NEXT ELEMENT ON QUEUE
         L     R1,DECBUQL           LOAD POINTER TO LAST ELEMENT
         ST    R6,DECBUQL           STORE NEW LAST ELEMENT ON QUEUE
         LTR   R1,R1                ARE THERE NO DECBS ON QUEUE?
         BZ    READMEM1             YES, GO HANDLE
         ST    R6,LODDECBP-LODDECB(,R1) STORE POINTER TO LAST ELEMENT
         B     READMEM              GO CONTINUE WITH READS
READMEM1 ST    R6,DECBUQF           STORE NEW FIRST ELEMENT ON QUEUE
         B     READMEM              GO CONTINUE WITH READS
         DROP  R6
STOPREAD NI    FLAGS,X'FF'-READFLAG STOP TRYING TO READ FOR NOW
CHEKMEM  DS    0H
         L     R6,DECBUQF           LOAD POINTER TO FIRST DECB
         USING LODDECB,R6
         CHECK LODDDECB             DO CHECK OF DECB
         L     R3,LODDDECB+12       LOAD STORED AREA ADDRESS AS BUF
         ST    R3,BUFFPTR           STORE BUFFER POINTER
         L     R1,LODDECBP          SAVE OLD NEXT PTR
         L     R0,DECBFQ            LOAD FREE QUEUE PTR
         ST    R0,LODDECBP          STORE FREE QUEUE PTR AS NEXT
         ST    R6,DECBFQ            STORE NEW FREE QUEUE PTR
         ST    R1,DECBUQF           STORE NEW FIRST QUEUE PTR
         LTR   R1,R1                IS PTR ZERO?
         BNZ   CHEKMEM1             NO, SKIP OVER STORE
         XC    DECBUQL,DECBUQL      INDICATE NO ELEMENTS ON QUEUE
         OI    FLAGS,READFLAG       START READING AGAIN
         DROP  R6
CHEKMEM1 DS    0H
         CLI   0(R3),X'80'          IS THIS AN IDR RECORD
         BNE   MEMEND               NO, FINISH PROCESSING MEMBER
         TM    FLAGS,JUSTCHEK       ARE WE JUST READING FOR FUN?
         BO    MEMEND               YES, FREE BUFFER
         TM    2(R3),X'80'          IS THIS THE LAST IDR RECORD?
         BZ    CHEKMEM2             NO, CONTINUE PROCESSING
         NI    2(R3),X'7F'          TURN OFF LAST IDR RECORD FLAG
         OI    FLAGS,JUSTCHEK       START CHECKING ONLY TO PURGE I/O
CHEKMEM2 DS    0H
         SLR   R1,R1
         IC    R1,1(R3)             LOAD IN COUNT FROM IDR RECORD
         CH    R1,=H'3'             IS THIS A VALID LENGTH RECORD?
         BL    MEMEND               NO, IGNORE THE RECORD
         CLI   2(R3),X'01'          IS THIS A ZAP IDR RECORD?
         BNE   CHEKMEM3             NO, OUTPUT THE RECORD
         TM    3(R3),X'7F'          IS THIS A DUMMY ZAP IDR RECORD?
         BZ    MEMEND               YES, IGNORE THE RECORD
CHEKMEM3 LH    R0,=H'9'             LOAD BASE RECORD LENGTH
         AR    R0,R1                ADD NEW COUNT
         STH   R0,CIDLEN            STORE NEW RECORD LENGTH
         BCTR  R1,0                 DECREMENT BY 1
         EX    R1,MVCIDR            MOVE IDR RECORD
         PUT   OMBR0DCB,(2)
MEMEND   L     R3,BUFFPTR           LOAD BUFFER POINTER
         FREEBUF LOADDCB,(3)        RETURN THE BUFFER
         XC    BUFFPTR,BUFFPTR      BUFFER POINTER IS INVALID
         TM    FLAGS,READFLAG+JUSTCHEK ARE WE DONE WITH PROCESSING?
         BNO   READMEM              NO, KEEP GOING
         B     ENDLODME
         DROP  R2
         SPACE ,
MVCIDR   MVC   CIDRREC-CIDREC(0,R2),1(R3)
         SPACE ,
LODEODAD DS    0H
         L     R2,DECBFQ            LOAD FREE QUEUE POINTER
         USING LODDECB,R6           RESTABLISH USING
LODEODLP L     R3,LODDDECB+12       LOAD STORED AREA ADDRESS AS BUF
         FREEBUF LOADDCB,(3)        FREE THE BUFFER
         L     R1,LODDECBP          STORE NEXT POINTER
         ST    R2,LODDECBP          STORE POINTER TO FREE QUEUE
         ST    R6,DECBFQ            STORE NEW FREE QUEUE POINTER
         LR    R2,R6                STORE PREVIOUS POINTER ON FREE Q
         LR    R6,R1                LOAD NEXT DECB ON USED QUEUE
         LTR   R6,R6                IS THIS END OF QUEUE?
         BNZ   LODEODLP             NO, CONTINUE TO FREE BUFFERS
         XC    DECBUQF,DECBUQF      INIT USED QUEUE POINTERS
         XC    DECBUQL,DECBUQL
ENDLODME DS    0H
         CNOP  2,4
         L     R14,*+6
         BSM   0,14                 ENTER 31 BIT MODE
         DC    A(X'80000000'+*+4)
*
* WRITE MEMBER RECORD
*
         LA    R3,OMBR0DCB
         USING IHADCB,R3
         LH    R2,CMBLEN            LOAD RECORD LENGTH
         BCTR  R2,0
         EX    R2,MVCMBR            DO MOVE (USES R9 EXPLICITLY)
         CNOP  2,4
         L     R14,*+6
         BSM   0,14                 ENTER 24 BIT MODE
         DC    A(*+4)
         LA    R2,MEMWAREA
         PUT   (3),(2)              WRITE RECORD TO OUTPUT FILE
         CNOP  2,4
         L     R14,*+6
         BSM   0,14                 ENTER 31 BIT MODE
         DC    A(X'80000000'+*+4)
         LA    R8,8(,R8)            POINT TO NEXT TAG RECORD
         B     MEMLOOP
         DROP  R3,R9
MVCMBR   MVC   MEMWAREA(0),0(R9)
CHEKTSTR BCTR  R8,0                 POINT TO END OF TAG AREA
         O     R8,=XL4'00000FFF'    POINT TO END OF PAGE
         ST    R8,SORTTAGE          SAVE IN PSL
         S     R8,SORTTAGB          CHECK IF VALID RANGE
         BP    CHEKTST1             YES, RANGE IS VALID
         MVI   SORTTOPT,X'40'       NO, RANGE INVALID, FLAG IN PSL
         B     CHEKRSTR
CHEKTST1 MVI   SORTTOPT,X'00'       RANGE VALID, FLAG IN PSL
CHEKRSTR L     R8,SRTRECPT          POINT TO END OF REC AREA
         BCTR  R8,0
         O     R8,=XL4'00000FFF'    POINT TO END OF PAGE
         ST    R8,SORTRECE          SAVE IN PSL
         S     R8,SORTRECB          CHECK IF VALID RANGE
         BP    CHEKRST1             YES, RANGE IS VALID
         MVI   SORTROPT,X'C0'       NO, RANGE INVALID, FLAG IN PSL
         CLI   SORTTOPT,X'40'       ARE BOTH INVALID?
         BE    INITSRT              YES, SKIP PGSER
         B     DORELS               NO (VERY, VERY UNLIKELY), DO PGSER
CHEKRST1 MVI   SORTROPT,X'80'       RANGE VALID, FLAG IN PSL
DORELS   PGSER L,RELEASE,LA=SORTPSL RELEASE PAGES WHICH MAY NOT BE USED
INITSRT  MVC   SRTTAGPT,SRTTAGBG
         MVC   SRTRECPT,SRTRECBG
INITSRT1 CNOP  2,4
         L     R14,*+6
         BSM   0,14                 ENTER 24 BIT MODE
         DC    A(CLOSEIT)
CLOSEIT  L     R1,=A(DCBLST1)
         CLOSE MF=(E,(1))
         B     GETLOOP
BADALLOC DS    0H
         C     R15,=F'4'
         BNE   BADDCB
         MVC   BADDYNVL(6),VOLUME
         MVC   BADDYNDS(44),PODSN
         PUT   SYSPRINT,BADDYNMS
         AP    ERRCOUNT,=P'1'
         LA    R15,0
         B     GETLOOP
NODSNM   DS    0H
         MVC   NODSNMVL(6),VOLUME
         MVC   NODSNMDS(44),PODSN
         PUT   SYSPRINT,NODSNMMS
         AP    ERRCOUNT,=P'1'
         LA    R15,0
         B     GETLOOP
BADDCB   DS    0H
         LA    R15,16
         B     WVOLRETN
         TITLE  'WVOLCOL0 -- TERMINATION'
INPEODAD DS    0H
WVOLEXIT DS    0H
         L     R1,=A(DCBLST)
         CLOSE MF=(E,(1))
         L     R1,SRTTAGBG
         LTR   R1,R1               DID WE GET BUFFER?
         BZ    WVOLEXT1            NO, SKIP FREEMAIN
         FREEMAIN RU,LV=SRTBUFSZ,A=(1)
WVOLEXT1 SLR   R15,R15
WVOLRETN DS    0H
         MVC   ERRCNTMS,BLANKSMS
         MVC   ERRCNTMS(41),ERRCNTLT
         MVC   ERRCNTMS+46(8),ERRCNTPT
         ED    ERRCNTMS+46(8),ERRCOUNT+1
         PUT   SYSPRINT,ERRCNTMS
         CLOSE (SYSPRINT)
         L     R13,SAVEAREA+4
         RETURN (14,12),RC=(15)
         TITLE  'WVOLCOL0 -- CONSTANTS'
***********************************
*                                 *
*         CONSTANTS               *
*                                 *
***********************************
SAVEAREA DS    18F
ZEROS    DC    10D'0'
FOXES    DC    XL8'FFFFFFFFFFFFFFFFF'
BUFFPTR  DS    A
DIRAREA  DS    2A
         ORG   DIRAREA
DIRPTR   DS    A
DIRBLK   DS    A
DECBUQF  DS    A
DECBUQL  DS    A
DECBFQ   DC    A(0)
TTRAREA  DC    A(0)
SRTTAGBG DC    A(0)
SRTTAGPT DS    A
SRTRECBG DS    A
SRTRECPT DS    A
SORTPSL  DS    0CL24
SORTTAGB DC    A(0)
SORTTAGE DC    A(0)
SORTTOPT DC    XL1'00'
         DC    XL3'000000'
SORTRECB DC    A(0)
SORTRECE DC    A(0)
SORTROPT DC    XL1'80'
         DC    XL3'000000'
         SPACE ,
ICSORTPR DS    0A                     ICSORTI PARM LIST
         DC    A(SORTPARM)            ADDRESS OF SORT CONTROL PARMS
ICSORTTB DS    A
         DC    A(SORTWORK)
DSNUM    DS    H
DSNBLKL  DC    H'32760'
SORTPARM DS    0CL9                  LENGTH OF SORT PARM AREA
SORTILEN DC    H'8'                  LENGTH OF ITEM TO BE SORTED
SORTKDSP DC    H'0'                  DISPLACEMENT OF THE KEY FIELD
SORTKLEN DC    H'3'                  LENGTH OF THE KEY FIELD
SORTITCT DS    H                     COUNT OF ITEMS TO BE SORTED
SORTSEQC DC    C'A'                  SORT SEQUENCE CHARACTER
FLAGS    DC    XL1'0'
GPOOLFLG EQU   X'80'
READFLAG EQU   X'40'
JUSTCHEK EQU   X'20'
         SPACE ,
DYNALPTR DC    F'0'                  PTR TO DYNALLOC RB (DYNALRB)
         SPACE ,
DYNALRB  DC    5F'0'
         SPACE ,
DYNALTUP DC    15F'0'                TEXT UNIT POINTER LIST
         SPACE ,
MEMWAREA DS    CL256
         LTORG
         TITLE  'WVOLCOL0 -- DCBS'
***********************************
*                                 *
*           DCBS                  *
*                                 *
***********************************
         SPACE ,
OMBR0DCB DCB   DSORG=PS,             MEMBER                            C
               DDNAME=OUTMBR0,         RECORDS                         C
               MACRF=(PM),               DATASET                       C
               BUFNO=5,                                                C
               RECFM=VB,                                               C
               LRECL=264
         SPACE ,
IDSR0DCB DCB   DSORG=PS,             DATA SET                          C
               DDNAME=INDSR0,          RECORDS                         C
               MACRF=(GL),               DATASET                       C
               EODAD=INPEODAD,                                         C
               BUFNO=2,                                                C
               RECFM=VB,                                               C
               LRECL=264
         SPACE ,
DIRDCB   DCB   DSORG=PS,             USED TO READ                      C
               DDNAME=XXXXXX,                                          C
               MACRF=GL,               PDS DIRECTORY                   C
               EODAD=DIREODAD,                                         C
               BUFNO=100,                                              C
               RECFM=F,                                                C
               LRECL=256,                                              C
               BLKSIZE=256
         SPACE ,
LOADDCB  DCB   DSORG=PO,             USED TO READ                      C
               DDNAME=XXXXXX,                                          C
               NCP=7,                  NUMBER OF CHANNEL PROGRAMS      C
               MACRF=R,                                                C
               RECFM=U,                  MEMBERS                       C
               EODAD=LODEODAD
         SPACE ,
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=133,MACRF=PM,RECFM=FBA
         SPACE ,
MLODDECB DS    0F
         DC    CL4'LOAD'
         DC    A(0)
         READ  LODMDECB,SF,LOADDCB,,32760,MF=L
         SPACE ,
         DS    0F
RETNDDN  DC    AL2(DALRTDDN)
         DC    X'0001'
         DC    X'0008'               SYSTEM RETURNS
PODDN    DS    CL8                      CREATED DDNAME
         EJECT
         LTORG
DECBQARE DS    CL(LODDECBL*7)       DECB QUEUE AREA (NCP * LEN)
DECBQARN EQU   *                    END OF QUEUE AREA
TUPTR    DS    0F
*
* THESE TUPS ARE FOR THE TARGET DATASETS
*
DISPTU   DC    AL2(DALSTATS)
         DC    X'0001'
         DC    X'0001'
         DC    X'08'                 DISP = SHR
         SPACE ,
VOLTU    DC    AL2(DALVLSER)
         DC    X'0001'
         DC    X'0006'
VOLUME   DC    CL6'??????'           VOLID
         SPACE ,
*
* THESE TUPS ARE COMMON TO BOTH
*
DSNTU    DC    AL2(DALDSNAM)
         DC    X'0001'
         DC    X'002C'
PODSN    DC    CL44' '               ALLOCATE BY DSNAME
         SPACE ,
         SPACE ,
UNITTU   DC    AL2(DALUNIT)
         DC    X'0001'
         DC    X'0008'
UNIT     DC    CL8'SYSALLDA'         UNIT = 3380
         SPACE ,
CLOSTU   DC    AL2(DALCLOSE)
         DC    X'0000'               FREE = CLOSE
         SPACE ,
DCBLST   OPEN  (OMBR0DCB,(OUTPUT),IDSR0DCB),MF=L
DCBLST1  CLOSE (DIRDCB,,LOADDCB),MF=L
IDRWAREA DS    CL300
         DS    0D
SORTWORK DS    CL200                 WORK AREA FOR ICSORTI
BLANKS   DC    CL44' '
ERRCOUNT DC    PL5'0'
SAVEREG2 DS    F
BADDYNMS DS    0CL133
BADDYNCC DC    C' '
BADDYNP1 DC    C' ON PACK '
BADDYNVL DC    C'XXXXXX'
BADDYNP2 DC    C', DATASET '
BADDYNDS DC    CL44' '
BADDYNSF DC    C' GOT A BAD DYNALLOC RC. PROCESSING SKIPPED.'
         DC    CL20' '
NODSNMMS DS    0CL133
NODSNMCC DC    C' '
NODSNMP1 DC    C' ON PACK '
NODSNMVL DC    C'XXXXXX'
NODSNMP2 DC    C', DATASET '
NODSNMDS DC    CL44' '
NODSNMSF DC    C' THE DATASET HAS BEEN DELETED OR RENAMED.  '
         DC    CL20' '
MISCERMS DS    0CL133
MISCERCC DC    C' '
MISCERP1 DC    C' ON PACK '
MISCERVL DC    C'XXXXXX'
MISCERP2 DC    C', DATASET '
MISCERDS DC    CL44' '
MISCERSF DC    C' THERE WAS AN ERROR DOING THE OBTAIN.      '
         DC    CL20' '
HEADR1DS DC    CL44'A&&P  LOAD  MODULE STAGE 2 ERROR REPORT'
ERRCNTPT DC    XL8'4020202020202120'
ERRCNTLT DC    C'-     DATASETS SKIPPED BECAUSE OF ERRORS:'
         DC    C' '
BLANKSMS DS    0CL133
         DC    CL133' '
HEADERMS DS    0CL133
         DC    CL133' '
ERRCNTMS DS    0CL133
         DC    CL133' '
         DC    C'     '
ISSTILL  CAMLST SEARCH,PODSN,VOLUME,CAMWORK
CAMWORK  DS    CL140
         END
